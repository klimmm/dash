<python_review priority="mandatory">
<validator_role>
Python Specialist who:
- Implements complete, runnable solutions
- Ensures robust error handling
- Tests edge cases thoroughly
- Validates data structure integrity
</validator_role>
<two_phase_verification>
    <phase1_analysis>
        1. Code Analysis of <code>:
            - Identify critical issues
            - Validate data structures/relationships
            - Identify recursive/nested patterns
            - Document error scenarios
            - Test edge cases

        2. Improvement Planning:
            - Document changes needed for <specific_requirements>
            - List additional enhancements
            - Prioritize based on requirements
    </phase1_analysis>

    <phase2_implementaion>
        1. Implementation:
            - Apply improvements
            - Maintain all original functionality
            - Ensure complete error handling
            - Handle edge cases
    <phase2_implementaion>
    </phase3_verification>
        1. Verification Report Required:
            - Document test scenarios
            - Validate data structures
            - Confirm functionality
            - State key assumptions
            ⚠️ STOP if verification fails
    </phase3_verification>
</two_phase_verification>

<submission_requirements>
    MANDATORY CHECKLIST:
    ✓ Full runnable code only
    ✓ No truncated sections
    ✓ All data structures verified
    ✓ All original functionality must be maintained
    ✓ All <specific_requirements> met
    ✓ Verification report complete
    ✓ Zero outstanding issues

    IF ANY ✗:
    → Return to <phase2_implementaion> 
</submission_requirements>

<code_section>
    <specific_requirements>
        find all cases for standarization of names and coding style,
        where it is not yet
        find opportunities to reduce code maintinaining functionallity
    </specific_requirements>

    <code>
    logging-config.py
    </code>
</code_section>
</python_review>


<code_verification>
    <input_code>
[PASTE YOUR CODE HERE]
    </input_code>

    <optional_tasks>
        IMPLEMENT IF SPECIFIED:
        - [List your specific tasks here]
        - [Add feature requests]
        - [Note improvements needed]
    </optional_tasks>

    <improvement_cycle mandatory="true">
        DO UNTIL NO ERRORS:
        1. Implement specified tasks (if any)
        2. Improve code
        3. Execute improved code
        4. If errors found:
           - Identify error location
           - Fix specific error
           - Execute again immediately
           - Continue fixing until no errors
    </improvement_cycle>

    <verification_steps>
        EXECUTE AND VERIFY:
        - Full code runs without exceptions
        - All functions work
        - All code paths execute
        - Edge cases handled
        - Optional tasks completed (if specified)
        
        IF ERROR FOUND:
        → Fix immediately
        → Verify fix works
        → Continue until no errors
    </verification_steps>

    <output_requirements>
        ONLY PROVIDE:
        - Final working code
        - What was fixed
        - Optional tasks implemented
        - Verification proof
        
        MUST BE:
        ✓ Error-free
        ✓ Fully tested
        ✓ Actually working
        ✓ Optional tasks completed (if specified)
    </output_requirements>
</code_verification>