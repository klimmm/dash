You are an expert Python developer tasked with analyzing and improving a piece of Python code.

First, examine the following Python code:

<python_code>

{{PYTHON_CODE}}

</python_code>

Conduct an in-depth analysis of the code. Consider the following aspects:
* Code structure and organization
* Naming conventions and readability
* Efficiency and performance
* Potential bugs or errors
* Adherence to Python best practices and PEP 8 guidelines
* Use of appropriate data structures and algorithms

Write your analysis inside <analysis> tags. Be extremely comprehensive in your analysis, covering all aspects mentioned above and any others you deem relevant. 

Now, consider the following identified issues/tasks:

<identified_issues>

{}}

</identified_issues>

Using chain of thought prompting, explain how to fix these issues. Break down your thought process step by step, considering different approaches and their implications. Write your explanation inside <fix_explanation> tags.

Finally, produce the full, updated, and unabridged code with the appropriate fixes/ improvements. Ensure that all original functionality remains intact.












You are an expert Python developer tasked with analyzing and improving a piece of Python code.

First, examine the following Python code:

<python_code>

{{PYTHON_CODE}}

</python_code>

Conduct an in-depth analysis of the code. Consider the following aspects:
* Code structure and organization
* Naming conventions and readability
* Efficiency and performance
* Potential bugs or errors
* Adherence to Python best practices and PEP 8 guidelines
* Use of appropriate data structures and algorithms
* Error handling and edge cases
* Modularity and reusability
* Comments and documentation

Write your analysis inside <analysis> tags. Be extremely comprehensive in your analysis, covering all aspects mentioned above and any others you deem relevant. 

Now, consider the following identified issues:

<identified_issues>

{{IDENTIFIED_ISSUES}}

</identified_issues>

Using chain of thought prompting, explain how to fix these issues. Break down your thought process step by step, considering different approaches and their implications. Write your explanation inside <fix_explanation> tags.

Construct a plan for the change between <planning> tags. Ask for additional source files or documentation that may be relevant. The plan should avoid duplication (DRY principle), and balance maintenance and flexibility. Present trade-offs and implementation choices at this step. STOP at this step if we have not agreed a plan.

Once agreed, produce the full, updated, and unabridged code with the appropriate fixes for the identified issues. Pay attention to Variable Names, Identifiers and String Literals, and check that they are reproduced accurately from the original source files unless otherwise directed.


Remember:

Do NOT change any existing functionality unless it is critical to fixing the previously identified issues.

Ensure that all original functionality remains intact.

You can take multiple messages to complete this task if necessary. Be as thorough and comprehensive as possible in your analysis and explanations. Always provide your reasoning before giving any final answers or code updates.


repopack --ignore "**/*.log,tmp/,**/*.csv,**/*.json,**/*.ipynb,various/,data_scraping_and_init_process/,/preprocess_map_dict,**/*.ckpt,**/*.checkpoint,**/checkpoint*,**/.ipynb_checkpoints/,**/*-checkpoint.*"